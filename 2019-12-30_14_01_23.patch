Index: springmvc-data-binding/src/test/java/com/ljh/FormatterTest.java
===================================================================
--- springmvc-data-binding/src/test/java/com/ljh/FormatterTest.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/test/java/com/ljh/FormatterTest.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,37 +0,0 @@
-package com.ljh;
-
-import org.junit.Assert;
-import org.junit.Test;
-import org.springframework.format.number.CurrencyStyleFormatter;
-
-import java.math.BigDecimal;
-import java.math.RoundingMode;
-import java.text.ParseException;
-import java.util.Locale;
-
-/**
- * Formatter
- *
- * @author ljh
- * created on 2019/10/29 9:45
- */
-public class FormatterTest {
-
-    @Test
-    public void test1() throws ParseException {
-        CurrencyStyleFormatter formatter = new CurrencyStyleFormatter();
-        formatter.setFractionDigits(2); // 保留小数点后几位
-        formatter.setRoundingMode(RoundingMode.CEILING); // 舍入模式 (ceiling 表示四舍五入)
-        // 1、将带货币符号的字符串“$123.125”转换为BigDecimal("123.00")
-        Assert.assertEquals(new BigDecimal("123.13"), formatter.parse("$123.125", Locale.US));
-    }
-
-    @Test
-    public void test2() {
-        CurrencyStyleFormatter formatter = new CurrencyStyleFormatter();
-        formatter.setFractionDigits(2);
-        formatter.setRoundingMode(RoundingMode.CEILING);
-        // 2、将BigDecimal("123")格式化为字符串“$123.00”展示
-        Assert.assertEquals("$123.00", formatter.print(new BigDecimal("123"), Locale.US));
-    }
-}
Index: springmvc-data-binding/src/main/java/com/ljh/common/MyDateConverter.java
===================================================================
--- springmvc-data-binding/src/main/java/com/ljh/common/MyDateConverter.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/java/com/ljh/common/MyDateConverter.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,28 +0,0 @@
-package com.ljh.common;
-
-import org.springframework.core.convert.converter.Converter;
-
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-
-/**
- * Converter
- * 全局/局部使用，Source(自定义)
- *
- * @author ljh
- * created on 2019/10/28 16:41
- */
-public class MyDateConverter implements Converter<String, Date> {
-
-    @Override
-    public Date convert(String source) {
-        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
-        try {
-            return sdf.parse(source);
-        } catch (ParseException e) {
-            e.printStackTrace();
-        }
-        return null;
-    }
-}
Index: springmvc-data-binding/src/main/java/com/ljh/common/MyDateFormatter.java
===================================================================
--- springmvc-data-binding/src/main/java/com/ljh/common/MyDateFormatter.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/java/com/ljh/common/MyDateFormatter.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,28 +0,0 @@
-package com.ljh.common;
-
-import org.springframework.format.Formatter;
-
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-
-/**
- * Formatter
- * 全局/局部使用，Source(String)
- *
- * @author ljh
- * created on 2019/10/29 10:16
- */
-public class MyDateFormatter implements Formatter<Date> {
-    @Override
-    public Date parse(String text, Locale locale) throws ParseException {
-        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
-        return sdf.parse(text);
-    }
-
-    @Override
-    public String print(Date object, Locale locale) {
-        return null;
-    }
-}
Index: springmvc-data-binding/src/main/java/com/ljh/common/MyPropertyEditor.java
===================================================================
--- springmvc-data-binding/src/main/java/com/ljh/common/MyPropertyEditor.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/java/com/ljh/common/MyPropertyEditor.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,30 +0,0 @@
-package com.ljh.common;
-
-import com.ljh.object.User;
-
-import java.beans.PropertyEditorSupport;
-
-/**
- * PropertyEditor
- * 局部使用，一般配合 WebDataBinder
- *
- * @author ljh
- * created on 2019/10/29 9:35
- */
-public class MyPropertyEditor extends PropertyEditorSupport {
-
-    @Override
-    public void setAsText(String text) throws IllegalArgumentException {
-        User u = new User();
-        String[] textArray = text.split(",");
-        u.setName(textArray[0]);
-        u.setAge(Integer.parseInt(textArray[1]));
-        this.setValue(u);
-    }
-
-    public static void main(String[] args) {
-        MyPropertyEditor editor = new MyPropertyEditor();
-        editor.setAsText("tom,22");
-        System.out.println(editor.getValue());
-    }
-}
Index: springmvc-data-binding/src/main/java/com/ljh/controller/TestController.java
===================================================================
--- springmvc-data-binding/src/main/java/com/ljh/controller/TestController.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/java/com/ljh/controller/TestController.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,179 +0,0 @@
-package com.ljh.controller;
-
-import com.ljh.object.*;
-import org.springframework.beans.propertyeditors.CustomDateEditor;
-import org.springframework.stereotype.Controller;
-import org.springframework.web.bind.WebDataBinder;
-import org.springframework.web.bind.annotation.*;
-
-import javax.servlet.http.HttpServletRequest;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.List;
-
-/**
- * TestController
- *
- * @author ljh
- * created on 2019/10/28 16:25
- */
-@Controller
-public class TestController {
-
-    // http://localhost:8080/baseType.do?age=10
-    @RequestMapping(value = "baseType.do")
-    @ResponseBody
-    public String baseType(@RequestParam("age") int age) {
-        return "age:" + age;
-    }
-
-    // http://localhost:8080/baseType2.do?age=10
-    @RequestMapping(value = "baseType2.do")
-    @ResponseBody
-    public String baseType2(Integer age) {
-        return "age:" + age;
-    }
-
-    // http://localhost:8080/array.do?names=Tom&names=Lucy&names=Jim
-    @RequestMapping(value = "array.do")
-    @ResponseBody
-    public String array(String[] names) {
-        StringBuilder sb = new StringBuilder();
-        for (String name : names) {
-            sb.append(name).append(" ");
-        }
-        return sb.toString();
-    }
-
-    // http://localhost:8080/object.do?name=Tom&age=10
-    // http://localhost:8080/object.do?name=Tom&age=10&contactInfo.phone=10086
-    // http://localhost:8080/object.do?user.name=Tom&admin.name=Lucy&age=10
-    @RequestMapping(value = "object.do")
-    @ResponseBody
-    public String object(User user, Admin admin) {
-        return user.toString() + " " + admin.toString();
-    }
-
-    @InitBinder("user")
-    public void initUser(WebDataBinder binder) {
-        binder.setFieldDefaultPrefix("user.");
-    }
-
-    @InitBinder("admin")
-    public void initAdmin(WebDataBinder binder) {
-        binder.setFieldDefaultPrefix("admin.");
-    }
-
-    // http://localhost:8080/list.do?users[0].name=Tom&users[1].name=Lucy
-    // http://localhost:8080/list.do?users[0].name=Tom&users[1].name=Lucy&users[20].name=Jim
-    @RequestMapping(value = "list.do")
-    @ResponseBody
-    public String list(UserListForm userListForm) {
-        return "listSize:" + userListForm.getUsers().size() + " " + userListForm.toString();
-    }
-
-    // http://localhost:8080/set.do?users[0].name=Tom&users[1].name=Lucy
-    // http://localhost:8080/set.do?users[0].name=Tom&users[1].name=Tom
-    @RequestMapping(value = "set.do")
-    @ResponseBody
-    public String set(UserSetForm userSetForm) {
-        return userSetForm.toString();
-    }
-
-    // http://localhost:8080/map.do?users['x'].name=Tom&users['x'].age=10&users['y'].name=Lucy
-    @RequestMapping(value = "map.do")
-    @ResponseBody
-    public String map(UserMapForm userMapForm) {
-        return userMapForm.toString();
-    }
-
-    // localhost:8080/json.do
-    // application/json
-    //  {
-    //      "name": "Jim",
-    //      "age": 16,
-    //      "contactInfo": {
-    //            "address": "beijing",
-    //            "phone": "10010"
-    //      }
-    //  }
-    @RequestMapping(value = "json.do")
-    @ResponseBody
-    public String json(@RequestBody User user) {
-        return user.toString();
-    }
-
-    // localhost:8080/xml.do
-    // application/xml
-    //  <?xml version="1.0" encoding="UTF-8" ?>
-    //      <admin>
-    // 	    <name>Jim</name>
-    // 	    <age>16</age>
-    //  </admin>
-    @RequestMapping(value = "xml.do")
-    @ResponseBody
-    public String xml(@RequestBody Admin admin) {
-        return admin.toString();
-    }
-
-    // http://localhost:8080/converter.do?bool=1
-    // http://localhost:8080/converter.do?bool=on
-    // http://localhost:8080/converter.do?bool=yes
-    @RequestMapping(value = "converter.do")
-    @ResponseBody
-    public String converter(Boolean bool) {
-        return bool.toString();
-    }
-
-    // http://localhost:8080/date.do?date=2018-01-01
-    @RequestMapping(value = "date.do")
-    @ResponseBody
-    public String date(Date date) {
-        return date.toString();
-    }
-
-    @InitBinder("date")
-    public void initDate(WebDataBinder binder) {
-        binder.registerCustomEditor(Date.class, new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd"), true));
-    }
-
-    // http://localhost:8080/book
-    @RequestMapping(value = "book", method = RequestMethod.GET)
-    @ResponseBody
-    public String book(HttpServletRequest request) {
-        String contentType = request.getContentType();
-        if (contentType == null) {
-            return "book.default";
-        } else if (contentType.equals("txt")) {
-            return "book.txt";
-        } else if (contentType.equals("html")) {
-            return "book.html";
-        }
-        return "book.default";
-    }
-
-    @RequestMapping(value = "subject/{subjectId}", method = RequestMethod.GET)
-    @ResponseBody
-    public String subjectGet(@PathVariable("subjectId") String subjectId) {
-        return "this is a get method, subjectId: " + subjectId;
-    }
-
-    @RequestMapping(value = "subject/{subjectId}", method = RequestMethod.POST)
-    @ResponseBody
-    public String subjectPost(@PathVariable("subjectId") String subjectId) {
-        return "this is a post method, subjectId: " + subjectId;
-    }
-
-    @RequestMapping(value = "subject/{subjectId}", method = RequestMethod.PUT)
-    @ResponseBody
-    public String subjectPut(@PathVariable("subjectId") String subjectId) {
-        return "this is a put method, subjectId: " + subjectId;
-    }
-
-    @RequestMapping(value = "subject/{subjectId}", method = RequestMethod.DELETE)
-    @ResponseBody
-    public String subjectDelete(@PathVariable("subjectId") String subjectId) {
-        return "this is a delete method, subjectId: " + subjectId;
-    }
-
-}
Index: springmvc-data-binding/src/main/java/com/ljh/object/Admin.java
===================================================================
--- springmvc-data-binding/src/main/java/com/ljh/object/Admin.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/java/com/ljh/object/Admin.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,44 +0,0 @@
-package com.ljh.object;
-
-import javax.xml.bind.annotation.XmlAnyElement;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-
-/**
- * Admin
- *
- * @author ljh
- * created on 2019/10/28 17:03
- */
-@XmlRootElement(name = "admin")
-public class Admin {
-
-    private String name;
-    private String age;
-
-    @XmlElement(name = "name")
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    @XmlElement(name = "age")
-    public String getAge() {
-        return age;
-    }
-
-    public void setAge(String age) {
-        this.age = age;
-    }
-
-    @Override
-    public String toString() {
-        return "Admin{" +
-                "name='" + name + '\'' +
-                ", age='" + age + '\'' +
-                '}';
-    }
-}
Index: springmvc-data-binding/src/main/java/com/ljh/object/ContactInfo.java
===================================================================
--- springmvc-data-binding/src/main/java/com/ljh/object/ContactInfo.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/java/com/ljh/object/ContactInfo.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,37 +0,0 @@
-package com.ljh.object;
-
-/**
- * ContactInfo
- *
- * @author ljh
- * created on 2019/10/28 17:00
- */
-public class ContactInfo {
-
-    private String phone;
-    private String address;
-
-    public String getPhone() {
-        return phone;
-    }
-
-    public void setPhone(String phone) {
-        this.phone = phone;
-    }
-
-    public String getAddress() {
-        return address;
-    }
-
-    public void setAddress(String address) {
-        this.address = address;
-    }
-
-    @Override
-    public String toString() {
-        return "ContactInfo{" +
-                "phone='" + phone + '\'' +
-                ", address='" + address + '\'' +
-                '}';
-    }
-}
Index: springmvc-data-binding/src/main/java/com/ljh/object/User.java
===================================================================
--- springmvc-data-binding/src/main/java/com/ljh/object/User.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/java/com/ljh/object/User.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,63 +0,0 @@
-package com.ljh.object;
-
-import java.util.Objects;
-
-/**
- * User
- *
- * @author ljh
- * created on 2019/10/28 16:57
- */
-public class User {
-
-    private String name;
-    private Integer age;
-    private ContactInfo contactInfo;
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public Integer getAge() {
-        return age;
-    }
-
-    public void setAge(Integer age) {
-        this.age = age;
-    }
-
-    public ContactInfo getContactInfo() {
-        return contactInfo;
-    }
-
-    public void setContactInfo(ContactInfo contactInfo) {
-        this.contactInfo = contactInfo;
-    }
-
-    @Override
-    public String toString() {
-        return "User{" +
-                "name='" + name + '\'' +
-                ", age='" + age + '\'' +
-                ", contactInfo=" + contactInfo +
-                '}';
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-        User user = (User) o;
-        return Objects.equals(name, user.name) &&
-                Objects.equals(age, user.age);
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(name, age);
-    }
-}
\ No newline at end of file
Index: springmvc-data-binding/src/main/java/com/ljh/object/UserListForm.java
===================================================================
--- springmvc-data-binding/src/main/java/com/ljh/object/UserListForm.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/java/com/ljh/object/UserListForm.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,29 +0,0 @@
-package com.ljh.object;
-
-import java.util.List;
-
-/**
- * UserListForm
- *
- * @author ljh
- * created on 2019/10/28 17:09
- */
-public class UserListForm {
-
-    private List<User> users;
-
-    public List<User> getUsers() {
-        return users;
-    }
-
-    public void setUsers(List<User> users) {
-        this.users = users;
-    }
-
-    @Override
-    public String toString() {
-        return "UserListForm{" +
-                "users=" + users +
-                '}';
-    }
-}
Index: springmvc-data-binding/src/main/java/com/ljh/object/UserMapForm.java
===================================================================
--- springmvc-data-binding/src/main/java/com/ljh/object/UserMapForm.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/java/com/ljh/object/UserMapForm.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,29 +0,0 @@
-package com.ljh.object;
-
-import java.util.Map;
-
-/**
- * UserMapForm
- *
- * @author ljh
- * created on 2019/10/28 18:14
- */
-public class UserMapForm {
-
-    private Map<String, User> users;
-
-    public Map<String, User> getUsers() {
-        return users;
-    }
-
-    public void setUsers(Map<String, User> users) {
-        this.users = users;
-    }
-
-    @Override
-    public String toString() {
-        return "UserMapForm{" +
-                "users=" + users +
-                '}';
-    }
-}
Index: springmvc-data-binding/src/main/java/com/ljh/object/UserSetForm.java
===================================================================
--- springmvc-data-binding/src/main/java/com/ljh/object/UserSetForm.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/java/com/ljh/object/UserSetForm.java	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,36 +0,0 @@
-package com.ljh.object;
-
-import java.util.LinkedHashSet;
-import java.util.Set;
-
-/**
- * UserSetForm
- *
- * @author ljh
- * created on 2019/10/28 17:30
- */
-public class UserSetForm {
-
-    private Set<User> users;
-
-    public UserSetForm() {
-        users = new LinkedHashSet<>();
-        users.add(new User());
-        users.add(new User());
-    }
-
-    public Set<User> getUsers() {
-        return users;
-    }
-
-    public void setUsers(Set<User> users) {
-        this.users = users;
-    }
-
-    @Override
-    public String toString() {
-        return "UserSetForm{" +
-                "users=" + users +
-                '}';
-    }
-}
Index: springmvc-data-binding/src/main/resources/applicationContext.xml
===================================================================
--- springmvc-data-binding/src/main/resources/applicationContext.xml	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/resources/applicationContext.xml	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,13 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-       http://www.springframework.org/schema/beans/spring-beans.xsd
-        http://www.springframework.org/schema/context
-        http://www.springframework.org/schema/context/spring-context.xsd">
-
-    <context:component-scan base-package="com.ljh"/>
-
-
-</beans>
\ No newline at end of file
Index: springmvc-data-binding/src/main/webapp/WEB-INF/dispatcher-servlet.xml
===================================================================
--- springmvc-data-binding/src/main/webapp/WEB-INF/dispatcher-servlet.xml	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/webapp/WEB-INF/dispatcher-servlet.xml	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
-	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
-	http://www.springframework.org/schema/mvc
-	http://www.springframework.org/schema/mvc/spring-mvc.xsd">
-
-    <context:component-scan base-package="com.ljh"/>
-<!--    <mvc:annotation-driven conversion-service="myDateFormatter"/>-->
-    <mvc:annotation-driven conversion-service="myDateConverter"/>
-
-<!--    <bean id ="myDateFormatter" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">-->
-<!--        <property name="formatters">-->
-<!--            <set>-->
-<!--                <bean class="com.ljh.common.MyDateFormatter"/>-->
-<!--            </set>-->
-<!--        </property>-->
-<!--    </bean>-->
-
-    <bean id ="myDateConverter" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
-        <property name="converters">
-            <set>
-                <bean class="com.ljh.common.MyDateConverter"/>
-                <bean class="org.springframework.core.convert.support.StringToBooleanConverter"/>
-            </set>
-        </property>
-    </bean>
-</beans>
Index: springmvc-data-binding/src/main/webapp/WEB-INF/web.xml
===================================================================
--- springmvc-data-binding/src/main/webapp/WEB-INF/web.xml	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/webapp/WEB-INF/web.xml	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
-         version="3.1"
-         metadata-complete="true">
-
-  <context-param>
-    <param-name>contextConfigLocation</param-name>
-    <param-value>classpath:applicationContext.xml</param-value>
-  </context-param>
-
-  <listener>
-    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
-  </listener>
-
-  <listener>
-    <listener-class>org.springframework.web.context.ContextCleanupListener</listener-class>
-  </listener>
-
-  <servlet>
-    <servlet-name>dispatcher</servlet-name>
-    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
-    <load-on-startup>1</load-on-startup>
-  </servlet>
-  <servlet-mapping>
-    <servlet-name>dispatcher</servlet-name>
-    <url-pattern>/</url-pattern>
-  </servlet-mapping>
-
-  <filter>
-    <filter-name>characterEncodingFilter</filter-name>
-    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
-    <init-param>
-      <param-name>encoding</param-name>
-      <param-value>UTF-8</param-value>
-    </init-param>
-  </filter>
-  <filter-mapping>
-    <filter-name>characterEncodingFilter</filter-name>
-    <url-pattern>/*</url-pattern>
-  </filter-mapping>
-</web-app>
Index: springmvc-data-binding/src/main/webapp/index.jsp
===================================================================
--- springmvc-data-binding/src/main/webapp/index.jsp	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/src/main/webapp/index.jsp	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,5 +0,0 @@
-<html>
-<body>
-<h2>Hello World!</h2>
-</body>
-</html>
Index: springmvc-data-binding/pom.xml
===================================================================
--- springmvc-data-binding/pom.xml	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/pom.xml	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,37 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <artifactId>springmvc-data-binding</artifactId>
-    <version>1.0-SNAPSHOT</version>
-    <packaging>war</packaging>
-
-    <parent>
-        <groupId>com.ljh</groupId>
-        <artifactId>spring</artifactId>
-        <version>1.0-SNAPSHOT</version>
-        <relativePath/>
-    </parent>
-
-    <dependencies>
-        <dependency>
-            <groupId>org.apache.tomcat</groupId>
-            <artifactId>tomcat-servlet-api</artifactId>
-            <version>9.0.24</version>
-        </dependency>
-
-        <dependency>
-            <groupId>org.aspectj</groupId>
-            <artifactId>aspectjrt</artifactId>
-            <version>1.9.3</version>
-        </dependency>
-
-        <dependency>
-            <groupId>com.fasterxml.jackson.core</groupId>
-            <artifactId>jackson-databind</artifactId>
-            <version>2.10.0</version>
-        </dependency>
-    </dependencies>
-
-</project>
Index: springmvc-data-binding/README.md
===================================================================
--- springmvc-data-binding/README.md	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/README.md	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,47 +0,0 @@
-# [SpringMVC数据绑定入门](https://www.imooc.com/learn/558)
-简介：数据绑定是将用户输入绑定到领域模型的一种特性。在本次课程中，将重点介绍SpringMVC中Controller控制层对数据绑定入门的相关知识。@Geely_Wu将带你深入剖析SpringMVC数据绑定在实际工作中容易踩到的各种坑，学习相关注解的使用，认识格式化工具和类型转换器以及RESTful扩展
-
-## 第1章 课程介绍
-*本章主要对课程所学内容进行介绍*
-- 1-1 SpringMVC数据绑定入门概述
-
-## 第2章 应用intellij idea搭建springMVC项目
-*intellij IDEA简短介绍以及用intellij IDEA搭建SpringMVC项目过程*
-- 2-1 应用intellij IDEA创建SpringMVC项目
-
-## 第3章 基本类型、包装类型的绑定
-*本章主要介绍基本类型、包装类型的数据绑定以及坑*
-- 3-1 简介
-- 3-2 基本类型处理
-- 3-3 包装类&数组的处理
-
-## 第4章 简单对象、复杂对象的绑定
-*本章主要介绍简单对象、复杂对象的数据绑定以及坑*
-- 4-1 简单对象&多层级对象
-- 4-2 同属性的多对象
-
-## 第5章 List、Set、Map类型的绑定
-*本章主要介绍List、Set、Map结构的数据绑定以及坑*
-- 5-1 关于List的数据绑定
-- 5-2 关于Set的数据绑定
-- 5-3 关于Map的数据绑定
-
-## 第6章 Json、Xml数据类型的绑定
-*本章主要介绍Json、Xml的数据绑定以及坑*
-- 6-1 关于Json的数据绑定
-- 6-2 关于xml的数据绑定
- 
-## 第7章 PropertyEditor、Formatter、Converter。自定义格式化工具和类型转换器
-*本章主要介绍SpringMVC提供的PropertyEditor和自定义Formatter、Converter的使用场景、解决的实际的问题以及Formatter和Converter的简单对比和选型依据*
-- 7-1 介绍
-- 7-2 PropertyEditor的应用
-- 7-3 Formatter的应用
-- 7-4 Converter的应用
- 
-## 第8章 知识点小扩展RESTful
-*本章主要介绍SpringMVC的RESTful实现方式，知识点小扩展*
-- 8-1 RESTful小扩展
- 
-## 9章 课程总结
-*对此次课程进行总结*
-- 9-1 课程总结
Index: springmvc-data-binding/RESTful.md
===================================================================
--- springmvc-data-binding/RESTful.md	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ springmvc-data-binding/RESTful.md	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
@@ -1,38 +0,0 @@
-# RESTful (Resource **Re**presentational **S**tate **T**ransfer)
----
-## Resource (资源)
-    1. 文本
-    2. 图片
-    3. 服务
-    4. 音频
-    5. ......
----
-## Representational (表现层)
-#### HTTP 协议的 content-type 和 accept
-    文本：txt、html、xml、json、二进制
-    图片：jpg、png
----
-## State Transfer (状态转化)
-#### 幂等性：每次 HTTP 请求相同的参数，相同的 URI，产生的结果是相同的
-    1. GET     获取资源                    http://wwww.book.com/book/001
-    2. POST    创建资源-不具有幂等性        http://wwww.book.com/book
-    3. PUT     创建(更新)资源              http://wwww.book.com/book/001
-    4. DELETE                             http://wwww.book.com/book/001
----
-## RESTful 设计
-    movie.douban.com/show/subject/11620560/             避免动词
-    movie.douban.com/subject/11620560/
-    
-    POST /accounts/1/transfer/500/to/2                  避免动词
-    POST /transaction
-        from=1&to=2&amount=500.00
-    
-    www.example.com/app/1.0/                            版本
-    www.example.com/app/
-        HEADER verson=1.0    
----
-## RESTful 总结
-    1. 每一个 URI 代表一种资源
-    2. 客户端和服务器之间，传递这种资源的某种表现层
-    3. 客户端通过 HTTP 动词，对服务器端资源进行操作，实现"表现层状态转化"
----
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 59d745a96869742b6efd5a74b8c43a1e12cff25a)
+++ pom.xml	(date 1577681983479)
@@ -9,6 +9,15 @@
     <packaging>pom</packaging>
     <version>1.0-SNAPSHOT</version>
 
+    <modules>
+        <!-- Spring框架小白的蜕变 -->
+        <module>spring-ioc</module>
+        <!-- SpringMVC数据绑定入门 -->
+        <module>spring-data-binding</module>
+        <!-- Spring Data 教程 -->
+        <module>spring-data</module>
+    </modules>
+
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <maven.compiler.source>1.8</maven.compiler.source>
@@ -65,13 +74,4 @@
         </dependency>
     </dependencies>
 
-    <modules>
-        <!-- Spring框架小白的蜕变 -->
-        <module>spring-ioc</module>
-        <!-- SpringMVC数据绑定入门 -->
-        <module>springmvc-data-binding</module>
-        <!-- Spring Data 教程 -->
-        <module>spring-data</module>
-    </modules>
-
 </project>
\ No newline at end of file
